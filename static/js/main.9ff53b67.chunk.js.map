{"version":3,"sources":["constants.js","User.js","store/posts.js","Comment.js","CommentList.js","Post.js","PostList.js","api.js","store/searchQuery.js","store/index.js","App.js","index.js"],"names":["POSTS_URL","USERS_URL","COMMENTS_URL","User","_ref","user","react_default","a","createElement","className","name","email","address","city","postsReducer","posts","arguments","length","undefined","action","type","filter","post","id","postId","map","Object","objectSpread2","comments","comment","commentId","connect","deleteComment","onClick","body","CommentList","src_Comment","key","deletePost","title","src_User","src_CommentList","PostList","src_Post","loadFromServer","url","response","regenerator_default","async","_context","prev","next","awrap","fetch","sent","abrupt","json","stop","searchQueryReducer","searchQuery","getPosts","state","getSearchQuery","store","createStore","combineReducers","applyMiddleware","thunk","setPosts","setSearchQuery","_useState","useState","_useState2","slicedToArray","isLoading","setIsLoading","normalizePosts","postsList","usersList","commentsList","find","userId","Fragment","lib","debounceTimeout","placeholder","onChange","e","target","value","trim","toLowerCase","src_PostList","includes","disabled","_ref2","_ref3","postsData","Promise","all","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.9ff53b67.chunk.js","sourcesContent":["export const POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\nexport const USERS_URL = 'https://jsonplaceholder.typicode.com/users';\nexport const COMMENTS_URL = 'https://jsonplaceholder.typicode.com/comments';\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ user }) => (\n  <p className=\"post__author\">\n    <span>{user.name}</span>\n    <br />\n    <span>{user.email}</span>\n    <br />\n    <span>{user.address.city}</span>\n  </p>\n);\n\nexport default User;\n\nUser.propTypes = { user: PropTypes.arrayOf(PropTypes.object).isRequired };\n","const SET_POSTS = 'setPosts';\nconst DELETE_POST = 'deletePost';\nconst DELETE_COMMENT = 'deleteComment';\n\nexport const setPosts = posts => ({\n  type: SET_POSTS,\n  posts,\n});\n\nexport const deletePost = postId => ({\n  type: DELETE_POST,\n  postId,\n});\n\nexport const deleteComment = (postId, commentId) => ({\n  type: DELETE_COMMENT,\n  postId,\n  commentId,\n});\n\nconst postsReducer = (posts = [], action) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n    case DELETE_POST:\n      return posts.filter(post => post.id !== action.postId);\n    case DELETE_COMMENT:\n      return posts.map((post) => {\n        if (post.id === action.postId) {\n          return {\n            ...post,\n            comments: post.comments.filter(\n              comment => comment.id !== action.commentId\n            ),\n          };\n        }\n\n        return post;\n      });\n    default:\n      return posts;\n  }\n};\n\nexport default postsReducer;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteComment } from './store/posts';\n\n// eslint-disable-next-line no-shadow\nconst Comment = ({ comment, deleteComment, postId }) => (\n  <div className=\"comments__item\">\n    <button\n      type=\"button\"\n      className=\"post__delete\"\n      onClick={() => deleteComment(postId, comment.id)}\n    >\n      Delete comment\n    </button>\n    <p className=\"comments__text\">{comment.body}</p>\n    <div className=\"comments__author\">\n      <span>{comment.name}</span>\n      <br />\n      <span>{comment.email}</span>\n    </div>\n  </div>\n);\n\nexport default connect(null, { deleteComment })(Comment);\n\nComment.propTypes = {\n  comment: PropTypes.objectOf(PropTypes.any).isRequired,\n  deleteComment: PropTypes.func.isRequired,\n  postId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// eslint-disable-next-line no-shadow\nimport Comment from './Comment';\n\nconst CommentList = ({ comments, postId }) => comments.length > 0 && (\n  <div className=\"post__comments comments\">\n    <h2 className=\"comments__title\">Comments:</h2>\n    {comments.map(comment => (\n      <Comment key={comment.id} comment={comment} postId={postId} />\n    ))}\n  </div>\n);\n\nexport default CommentList;\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport User from './User';\nimport CommentList from './CommentList';\nimport { deletePost } from './store/posts';\n\n// eslint-disable-next-line no-shadow\nconst Post = ({ post, deletePost }) => (\n  <article className=\"post__item\">\n    <button\n      type=\"button\"\n      className=\"post__delete\"\n      onClick={() => deletePost(post.id)}\n    >\n      Delete post\n    </button>\n    <h2 className=\"post__title\">{post.title}</h2>\n    <p className=\"post__text\">{post.body}</p>\n    <User user={post.user} />\n    <CommentList comments={post.comments} postId={post.id} />\n  </article>\n);\n\nexport default connect(null, { deletePost })(Post);\n\nPost.propTypes = {\n  post: PropTypes.objectOf(PropTypes.any).isRequired,\n  deletePost: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Post from './Post';\n\nconst PostList = ({ posts }) => (\n  <section className=\"post__list\">\n    {posts.map(post => (\n      <Post key={post.id} post={post} />\n    ))}\n  </section>\n);\n\nexport default PostList;\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","export const loadFromServer = async(url) => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n","const SET_SEARCH_QUERY = 'searchQuery';\n\nexport const setSearchQuery = searchQuery => ({\n  type: SET_SEARCH_QUERY,\n  searchQuery,\n});\n\nconst searchQueryReducer = (searchQuery = '', action) => {\n  switch (action.type) {\n    case SET_SEARCH_QUERY:\n      return action.searchQuery;\n    default:\n      return searchQuery;\n  }\n};\n\nexport default searchQueryReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport postsReducer from './posts';\nimport searchQueryReducer from './searchQuery';\n\nexport const getPosts = state => state.posts;\nexport const getSearchQuery = state => state.searchQuery;\n\nconst store = createStore(combineReducers({\n  posts: postsReducer,\n  searchQuery: searchQueryReducer,\n}), applyMiddleware(thunk));\n\nexport default store;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { DebounceInput as SearchInput } from 'react-debounce-input';\nimport PropTypes from 'prop-types';\nimport { POSTS_URL, USERS_URL, COMMENTS_URL } from './constants';\nimport PostList from './PostList';\nimport { loadFromServer } from './api';\nimport './App.css';\nimport { getSearchQuery, getPosts } from './store';\nimport { setPosts } from './store/posts';\nimport { setSearchQuery } from './store/searchQuery';\n\n// eslint-disable-next-line no-shadow\nfunction App({ posts, searchQuery, setPosts, setSearchQuery }) {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const normalizePosts = (postsList, usersList, commentsList) => postsList\n    .map(post => ({\n      ...post,\n      comments: commentsList.filter(comment => comment.postId === post.id),\n      user: usersList.find(user => user.id === post.userId),\n    }));\n\n  const loadPosts = async() => {\n    setIsLoading(true);\n\n    const [postsList, usersList, commentsList] = await Promise.all([\n      loadFromServer(POSTS_URL),\n      loadFromServer(USERS_URL),\n      loadFromServer(COMMENTS_URL),\n    ]);\n\n    const postsData = normalizePosts(\n      postsList,\n      usersList,\n      commentsList,\n    );\n\n    setPosts(postsData);\n    setIsLoading(false);\n  };\n\n  const filterPosts = (e) => {\n    setSearchQuery(e.target.value.trim().toLowerCase());\n  };\n\n  const getFilteredPosts = () => posts.filter(\n    post => (post.title + post.body).toLowerCase().includes(searchQuery),\n  );\n\n  return (\n    <>\n      {posts.length > 0 ? (\n        <div className=\"post\">\n          <h1 className=\"title\">\n            Dynamic list of posts\n          </h1>\n          <SearchInput\n            className=\"post__search\"\n            debounceTimeout={500}\n            placeholder=\"Type to search...\"\n            onChange={filterPosts}\n          />\n          <PostList posts={getFilteredPosts()} />\n        </div>\n      ) : (\n        <div className=\"post__start\">\n          <button\n            disabled={isLoading}\n            className=\"post__button\"\n            type=\"button\"\n            onClick={loadPosts}\n          >\n            {isLoading ? 'Loading...' : 'Load Posts'}\n          </button>\n        </div>\n      )}\n    </>\n  );\n}\n\nconst mapStateToProps = state => ({\n  posts: getPosts(state),\n  searchQuery: getSearchQuery(state),\n});\n\nexport default connect(mapStateToProps, {\n  setPosts, setSearchQuery,\n})(App);\n\nApp.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  searchQuery: PropTypes.string.isRequired,\n  setPosts: PropTypes.func.isRequired,\n  setSearchQuery: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}