{"version":3,"sources":["User.js","api.js","store/isLoading.js","store/posts.js","Comment.js","CommentList.js","Post.js","PostList.js","store/searchQuery.js","store/index.js","App.js","constants.js","index.js"],"names":["User","_ref","user","react_default","a","createElement","className","name","email","address","city","loadFromServer","url","response","regenerator_default","async","_context","prev","next","awrap","fetch","sent","abrupt","json","stop","setIsLoading","isLoading","type","isLoadingReducer","arguments","length","undefined","action","postsReducer","posts","filter","post","id","postId","map","Object","objectSpread2","comments","comment","commentId","connect","deleteComment","onClick","body","CommentList","src_Comment","key","deletePost","title","src_User","src_CommentList","PostList","src_Post","searchQueryReducer","searchQuery","getPosts","state","getSearchQuery","getIsLoading","store","createStore","combineReducers","applyMiddleware","thunk","setSearchQuery","loadPostsFromServer","dispatch","normalizePosts","_ref2","postsList","usersList","commentsList","postsData","users","find","userId","Promise","all","slicedToArray","Fragment","lib","debounceTimeout","placeholder","onChange","e","target","value","trim","toLowerCase","src_PostList","includes","disabled","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.194e12bc.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst User = ({ user }) => (\n  <p className=\"post__author\">\n    <span>{user.name}</span>\n    <br />\n    <span>{user.email}</span>\n    <br />\n    <span>{user.address.city}</span>\n  </p>\n);\n\nexport default User;\n\nUser.propTypes = { user: PropTypes.arrayOf(PropTypes.object).isRequired };\n","export const loadFromServer = async(url) => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n","const SET_IS_LOADING = 'isLoading';\n\nexport const setIsLoading = isLoading => ({\n  type: SET_IS_LOADING,\n  isLoading,\n});\n\nconst isLoadingReducer = (isLoading = false, action) => {\n  switch (action.type) {\n    case SET_IS_LOADING:\n      return action.isLoading;\n    default:\n      return isLoading;\n  }\n};\n\nexport default isLoadingReducer;\n","import { loadFromServer } from '../api';\nimport { setIsLoading } from './isLoading';\nimport { COMMENTS_URL, POSTS_URL, USERS_URL } from '../constants';\n\nconst SET_POSTS = 'setPosts';\nconst DELETE_POST = 'deletePost';\nconst DELETE_COMMENT = 'deleteComment';\n\nexport const setPosts = posts => ({\n  type: SET_POSTS,\n  posts,\n});\n\nexport const deletePost = postId => ({\n  type: DELETE_POST,\n  postId,\n});\n\nexport const deleteComment = (postId, commentId) => ({\n  type: DELETE_COMMENT,\n  postId,\n  commentId,\n});\n\nexport const loadPostsFromServer = () => async(dispatch) => {\n  const normalizePosts = (posts, users, comments) => posts\n    .map(post => ({\n      ...post,\n      comments: comments.filter(comment => comment.postId === post.id),\n      user: users.find(user => user.id === post.userId),\n    }));\n\n  dispatch(setIsLoading(true));\n\n  const [postsList, usersList, commentsList] = await Promise.all([\n    loadFromServer(POSTS_URL),\n    loadFromServer(USERS_URL),\n    loadFromServer(COMMENTS_URL),\n  ]);\n\n  const postsData = normalizePosts(\n    postsList,\n    usersList,\n    commentsList,\n  );\n\n  dispatch(setPosts(postsData));\n  dispatch(setIsLoading(false));\n};\n\nconst postsReducer = (posts = [], action) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n    case DELETE_POST:\n      return posts.filter(post => post.id !== action.postId);\n    case DELETE_COMMENT:\n      return posts.map((post) => {\n        if (post.id === action.postId) {\n          return {\n            ...post,\n            comments: post.comments.filter(\n              comment => comment.id !== action.commentId\n            ),\n          };\n        }\n\n        return post;\n      });\n    default:\n      return posts;\n  }\n};\n\nexport default postsReducer;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteComment } from './store/posts';\n\n// eslint-disable-next-line no-shadow\nconst Comment = ({ comment, deleteComment, postId }) => (\n  <div className=\"comments__item\">\n    <button\n      type=\"button\"\n      className=\"post__delete\"\n      onClick={() => deleteComment(postId, comment.id)}\n    >\n      Delete comment\n    </button>\n    <p className=\"comments__text\">{comment.body}</p>\n    <div className=\"comments__author\">\n      <span>{comment.name}</span>\n      <br />\n      <span>{comment.email}</span>\n    </div>\n  </div>\n);\n\nexport default connect(null, { deleteComment })(Comment);\n\nComment.propTypes = {\n  comment: PropTypes.objectOf(PropTypes.any).isRequired,\n  deleteComment: PropTypes.func.isRequired,\n  postId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// eslint-disable-next-line no-shadow\nimport Comment from './Comment';\n\nconst CommentList = ({ comments, postId }) => comments.length > 0 && (\n  <div className=\"post__comments comments\">\n    <h2 className=\"comments__title\">Comments:</h2>\n    {comments.map(comment => (\n      <Comment key={comment.id} comment={comment} postId={postId} />\n    ))}\n  </div>\n);\n\nexport default CommentList;\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport User from './User';\nimport CommentList from './CommentList';\nimport { deletePost } from './store/posts';\n\n// eslint-disable-next-line no-shadow\nconst Post = ({ post, deletePost }) => (\n  <article className=\"post__item\">\n    <button\n      type=\"button\"\n      className=\"post__delete\"\n      onClick={() => deletePost(post.id)}\n    >\n      Delete post\n    </button>\n    <h2 className=\"post__title\">{post.title}</h2>\n    <p className=\"post__text\">{post.body}</p>\n    <User user={post.user} />\n    <CommentList comments={post.comments} postId={post.id} />\n  </article>\n);\n\nexport default connect(null, { deletePost })(Post);\n\nPost.propTypes = {\n  post: PropTypes.objectOf(PropTypes.any).isRequired,\n  deletePost: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Post from './Post';\n\nconst PostList = ({ posts }) => (\n  <section className=\"post__list\">\n    {posts.map(post => (\n      <Post key={post.id} post={post} />\n    ))}\n  </section>\n);\n\nexport default PostList;\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","const SET_SEARCH_QUERY = 'searchQuery';\n\nexport const setSearchQuery = searchQuery => ({\n  type: SET_SEARCH_QUERY,\n  searchQuery,\n});\n\nconst searchQueryReducer = (searchQuery = '', action) => {\n  switch (action.type) {\n    case SET_SEARCH_QUERY:\n      return action.searchQuery;\n    default:\n      return searchQuery;\n  }\n};\n\nexport default searchQueryReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport postsReducer from './posts';\nimport searchQueryReducer from './searchQuery';\nimport isLoadingReducer from './isLoading';\n\nexport const getPosts = state => state.posts;\nexport const getSearchQuery = state => state.searchQuery;\nexport const getIsLoading = state => state.isLoading;\n\nconst store = createStore(combineReducers({\n  posts: postsReducer,\n  searchQuery: searchQueryReducer,\n  isLoading: isLoadingReducer,\n}), applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { DebounceInput as SearchInput } from 'react-debounce-input';\nimport PropTypes from 'prop-types';\nimport PostList from './PostList';\nimport { loadPostsFromServer } from './store/posts';\nimport './App.css';\nimport { getSearchQuery, getPosts, getIsLoading } from './store';\nimport { setSearchQuery } from './store/searchQuery';\n\nconst App = (\n  { posts, isLoading, searchQuery,\n    // eslint-disable-next-line no-shadow\n    setSearchQuery, loadPostsFromServer }\n) => {\n  const loadPosts = async() => {\n    await loadPostsFromServer();\n  };\n\n  const filterPosts = (e) => {\n    setSearchQuery(e.target.value.trim().toLowerCase());\n  };\n\n  const getFilteredPosts = () => posts.filter(\n    post => (post.title + post.body).toLowerCase().includes(searchQuery),\n  );\n\n  return (\n    <>\n      {posts.length > 0 ? (\n        <div className=\"post\">\n          <h1 className=\"title\">\n            Dynamic list of posts\n          </h1>\n          <SearchInput\n            className=\"post__search\"\n            debounceTimeout={500}\n            placeholder=\"Type to search...\"\n            onChange={filterPosts}\n          />\n          <PostList posts={getFilteredPosts()} />\n        </div>\n      ) : (\n        <div className=\"post__start\">\n          <button\n            disabled={isLoading}\n            className=\"post__button\"\n            type=\"button\"\n            onClick={loadPosts}\n          >\n            {isLoading ? 'Loading...' : 'Load Posts'}\n          </button>\n        </div>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  posts: getPosts(state),\n  searchQuery: getSearchQuery(state),\n  isLoading: getIsLoading(state),\n});\n\nexport default connect(mapStateToProps, {\n  setSearchQuery, loadPostsFromServer,\n})(App);\n\nApp.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  searchQuery: PropTypes.string.isRequired,\n  setSearchQuery: PropTypes.func.isRequired,\n  loadPostsFromServer: PropTypes.func.isRequired,\n};\n","export const POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\nexport const USERS_URL = 'https://jsonplaceholder.typicode.com/users';\nexport const COMMENTS_URL = 'https://jsonplaceholder.typicode.com/comments';\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}